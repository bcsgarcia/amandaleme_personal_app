default_platform(:ios)

platform :ios do
  desc "Build and deploy to TestFlight"
  lane :deploy do
    # Configurar SSH para acessar o repositório de certificados
    sh("echo \"#{ENV['SSH_PRIVATE_KEY_CERT_REPO']}\" > /tmp/deploy_key")
    sh("chmod 600 /tmp/deploy_key")
    sh("eval $(ssh-agent -s)")
    sh("ssh-add /tmp/deploy_key")
    sh("ssh-keyscan github.com >> ~/.ssh/known_hosts")

    # Decodificar e salvar a chave API
    api_key_base64 = ENV['APP_STORE_CONNECT_API_KEY']
    api_key_path = File.expand_path("AuthKey.p8", Dir.pwd)  # Usando caminho absoluto
    UI.message("Decodificando e salvando a chave API em #{api_key_path}")

    File.open(api_key_path, "wb") do |file|
      file.write(Base64.decode64(api_key_base64))
    end

    if File.exist?(api_key_path)
      UI.message("Arquivo de chave API criado com sucesso em #{api_key_path}")

      # Ler e imprimir o conteúdo do arquivo AuthKey.p8
      api_key_content = File.read(api_key_path)
      UI.message("Conteúdo de AuthKey.p8: #{api_key_content}")
    else
      UI.error("Erro ao criar o arquivo de chave API em #{api_key_path}")
      return  # Saia da execução se o arquivo não puder ser criado
    end

    api_key = app_store_connect_api_key(
      key_id: 'JS3MYV9HPQ',
      issuer_id: '513d5581-7fd6-470a-8e83-f2f97820b525',
      key_filepath: api_key_path
    )

    UI.message("API_KEY: #{api_key}")

    # Sincronizar versão com o projeto iOS
    sync_version

    match(
      type: "appstore",
      api_key: api_key
    )

    # build_app(
    #   workspace: "Runner.xcworkspace",
    #   scheme: "Runner",
    #   export_method: "app-store"
    # )

    sync_code_signing(
      type: "appstore",
      api_key: api_key
    )

    # build_app(
    #   workspace: "Runner.xcworkspace",
    #   scheme: "Runner",
    #   export_method: "app-store",
    #   export_options: {
    #     provisioningProfiles: {
    #       "com.bcsgarcia.personal-app-amanda-leme" => "match AppStore com.bcsgarcia.personal-app-amanda-leme"
    #     }
    #   },
    #   include_bitcode: true,  # ou false, dependendo da necessidade
    #   codesigning_identity: "iPhone Distribution",  # ajuste conforme necessário
    #   skip_profile_detection: false  # Para não pular a detecção de perfil
    # )

    build_app(
      workspace: "Runner.xcworkspace",
      scheme: "Runner",
      export_method: "app-store",
      codesigning_identity: "iPhone Distribution",  # Use uma identidade de distribuição
      provisioning_profile: "Apple Connect Distribution"
    )


    upload_to_testflight(
      api_key: api_key
    )
  end

  desc "Synchronize version with pubspec.yaml"
  lane :sync_version do
    # Ler a versão do pubspec.yaml
    pubspec = File.read("../../pubspec.yaml")
    version = pubspec.match(/version: (\d+\.\d+\.\d+\+\d+)/)[1]

    # Separar versão e número de build
    version_name, version_code = version.split("+")

    # Atualizar o projeto iOS
    increment_version_number(
      version_number: version_name,
      xcodeproj: "Runner.xcodeproj"
    )
    increment_build_number(
      build_number: version_code,
      xcodeproj: "Runner.xcodeproj"
    )
  end
end