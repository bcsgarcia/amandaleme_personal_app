default_platform(:android)

platform :android do
  desc "Build the release App Bundle"
  lane :build_release do
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "build", "appbundle", "--release", "--target=lib/main/main.dart")
    # O AAB estará no caminho padrão de saída, a menos que você especifique outro
  end

  lane :increment_version_and_build do
    # Caminho para o pubspec.yaml
    pubspec_path = "../pubspec.yaml"

    # Lê o conteúdo do pubspec.yaml
    pubspec = File.read(pubspec_path)

    # Encontra a linha com a versão atual.
    version_line = pubspec.match(/version: (\d+\.\d+\.\d+\+\d+)/)[0]
    version_numbers = version_line.match(/(\d+)\.(\d+)\.(\d+)\+(\d+)/).captures

    major = version_numbers[0]
    minor = version_numbers[1]
    patch = version_numbers[2]
    build = version_numbers[3].to_i

    # Incrementa o número de build
    new_build = build + 1

    # Cria a nova linha de versão
    new_version_line = "version: #{major}.#{minor}.#{patch}+#{new_build}"

    # Substitui a linha de versão antiga pela nova no conteúdo do pubspec.yaml
    new_pubspec = pubspec.sub(version_line, new_version_line)

    # Escreve o novo pubspec.yaml
    File.open(pubspec_path, "w") { |file| file.puts new_pubspec }

    # Faz o commit das mudanças no git
    sh("git", "commit", "-am", "Increment version number to #{new_version_line}")
    sh("git", "push")
  end


  desc "Deploy to the Google Play"
  lane :deploy do
    increment_version_and_build
    build_release # Chama a lane definida acima para fazer o build do AAB
    upload_to_play_store(
      track: 'alpha', # Ou beta, production, etc., dependendo do seu caso de uso
      json_key_data: ENV["GOOGLE_CLOUD_CREDENTIALS"], # Usa a variável de ambiente
      aab: '../build/app/outputs/bundle/release/app-release.aab', # Certifique-se de que este caminho esteja correto
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
  end
end